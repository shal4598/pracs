// Blockchain pracs
# # // //********************************************************************************** Practical No: 1
# # 1. Write the following programs for Blockchain in Python :
# # i. A Simple client class that generates the private and public keys by using the built in Python RSA algorithm and test it.
## pip install pycryptodome
# from Crypto.PublicKey import RSA
# class Client:
#     def __init__(self):
#         self.private_key = None
#         self.public_key = None
#
#     def generate_keys(self):
#         key = RSA.generate(2048)
#         self.private_key = key.export_key()
#         self.public_key = key.publickey().export_key()
#
#     def display_keys(self):
#         print("Private Key:")
#         print(self.private_key.decode())
#         print("---------------------")
#         print("Public Key:")
#         print(self.public_key.decode())
#         print("---------------------")
#
# # Creating a client and generating keys
# client = Client()
# client.generate_keys()
#
# # Displaying the keys
# client.display_keys()
##############################################################################################

# # ii. A transaction class to send and receive money and test it.
# class Transaction:
#     def __init__(self, sender, receiver, amount):
#         self.sender = sender
#         self.receiver = receiver
#         self.amount = amount
#
#     def send_money(self):
#         print(f"{self.sender} sent {self.amount} to {self.receiver}")
#
#     def receive_money(self):
#         print(f"{self.receiver} received {self.amount} from {self.sender}")
#
# # Creating a transaction and sending/receiving money
# transaction = Transaction("Alice", "Bob", 0.5)
# transaction.send_money()
# transaction.receive_money()

#
# // //************************************************************************************* Practical No: 2
#
# #2. Write the following programs for Blockchain in Python :
# # i. Create multiple transactions and display them.
#
# import hashlib
# import datetime
#
# class Transaction:
#     def __init__(self, sender, receiver, amount):
#         self.sender = sender
#         self.receiver = receiver
#         self.amount = amount
#
#     def display(self):
#         print("Sender: ", self.sender)
#         print("Receiver: ", self.receiver)
#         print("Amount: ", self.amount)
#
# # Creating transactions
# transaction1 = Transaction("Alice", "Bob", 0.5)
# transaction2 = Transaction("Bob", "Charlie", 0.3)
# transaction3 = Transaction("Alice", "Charlie", 0.2)
#
# # Displaying transactions
# transaction1.display()
# print("----------------------")
# transaction2.display()
# print("----------------------")
# transaction3.display()
#
# # ii. Create a blockchain, a genesis block and execute it.
# class Block:
#     def __init__(self, index, timestamp, data, previous_hash):
#         self.index = index
#         self.timestamp = timestamp
#         self.data = data
#         self.previous_hash = previous_hash
#         self.hash = self.calculate_hash()
#
#     def calculate_hash(self):
#         sha = hashlib.sha256()
#         sha.update((str(self.index) + str(self.timestamp) + str(self.data) + str(self.previous_hash)).encode('utf-8'))
#         return sha.hexdigest()
#
# class Blockchain:
#     def __init__(self):
#         self.chain = [self.create_genesis_block()]
#
#     def create_genesis_block(self):
#         return Block(0, datetime.datetime.now(), "Genesis Block", "0")
#
#     def add_block(self, data):
#         previous_block = self.chain[-1]
#         new_block = Block(len(self.chain), datetime.datetime.now(), data, previous_block.hash)
#         self.chain.append(new_block)
#
#     def display_chain(self):
#         for block in self.chain:
#             print("Block Index: ", block.index)
#             print("Timestamp: ", block.timestamp)
#             print("Data: ", block.data)
#             print("Previous Hash: ", block.previous_hash)
#             print("Hash: ", block.hash)
#             print("----------------------")
#
# # Creating a blockchain
# blockchain = Blockchain()
#
# # Adding blocks to the blockchain
# blockchain.add_block("Transaction 1")
# blockchain.add_block("Transaction 2")
# blockchain.add_block("Transaction 3")
#
# # Displaying the blockchain
# blockchain.display_chain()

# // //************************************************************************************* Practical No: 3
# # 3.Write the following programs for Blockchain in Python :
# # i) Create a mining function and test it.
# import hashlib
# def mine_block(previous_block_hash, transactions):
#     nonce = 0
#     while True:
#         block_data = str(nonce) + str(previous_block_hash) + str(transactions)
#         block_hash = hashlib.sha256(block_data.encode()).hexdigest()
# 
#         # Check if the block hash satisfies the mining condition
#         if block_hash.startswith('0000'):
#             print("Block mined successfully!")
#             print("Nonce:",nonce)
#             print("Block Hash:",block_hash)
#             break
#         nonce += 1
# 
# # Test mining a block
# previous_block_hash = "0000000000000000000000000000000000000000000000000000000000000000"
# transactions = ["Transaction 1", "Transaction 2", "Transaction 3"]
# mine_block(previous_block_hash, transactions)

# #i
# class Block:
#     def __init__(self, index, previous_block_hash, transactions):
#         self.index = index
#         self.previous_block_hash = previous_block_hash
#         self.transactions = transactions
#
#     def display(self):
#         print("Block Index:", self.index)
#         print("Previous Block Hash:", self.previous_block_hash)
#         print("Transactions:", self.transactions)
#         print("---------------------")

# # # ii) Add blocks to the miner and dump the blockchain.
# class Blockchain:
#     def __init__(self):
#         self.chain = []
#
#     def add_block(self, block):
#         self.chain.append(block)
#
#     def dump_chain(self):
#         for block in self.chain:
#             block.display()
#
# # Create a blockchain and add blocks
# blockchain = Blockchain()
#
# # Create blocks
# block1 = Block(1, "0000000000000000000000000000000000000000000000000000000000000000", ["Transaction 1"])
# block2 = Block(2, block1.previous_block_hash, ["Transaction 2"])
# block3 = Block(3, block2.previous_block_hash, ["Transaction 3"])
#
# # Add blocks to the blockchain
# blockchain.add_block(block1)
# blockchain.add_block(block2)
# blockchain.add_block(block3)
#
# # Dump the blockchain
# blockchain.dump_chain()


// Solidity pracs
// //*********************************************************************************** Practical No: 4

// // 4Implement and demonstrate the user of the following in Solidity :
// // i) Variable
// // ii) Operations
// // iii) Loops
// // iv) Decision Making
// // v) Strings

// //////// 4a. Variable
// pragma solidity ^0.8.0;

// contract SolidityTest {
//     uint storedData; // State variable
//     constructor() public {
//     storedData = 15;
// }
// function getResult() public view returns(uint){
// uint a = 1; // local variable
// uint b = 10;
// uint result = a + b;
// return result;
// //return storedData; //access the state variable
// }}

// /////// state variables
// pragma solidity ^0.8.0;
// // Creating a contract
// contract Solidity_var_Test {
// // Declaring a state variable
// uint8 public state_var;
// // Defining a constructor
// constructor() public {
// state_var = 16;
// }}

// //////// Global variables
// pragma solidity ^0.8.0;
// // Creating a contract
// contract Test {
// // Defining a variable
// address public admin;
// // Creating a constructor to
// // use Global variable
// constructor() public {
// admin = msg.sender;}}

// ////////////////// 4b. Operations

// // Solidity contract to demonstrate

// // Arithmetic Operator
// pragma solidity ^0.8.0;
// // Creating a contract
// contract SolidityTest {
// // Initializing variables
// uint16 public a = 20;
// uint16 public b = 10;
// // Initializing a variable // with sum
// uint public sum = a + b;
// // Initializing a variable
// // with the difference
// uint public diff = a - b;
// // Initializing a variable
// // with product
// uint public mul = a * b;
// // Initializing a variable
// // with quotient
// uint public div = a / b;
// // Initializing a variable
// // with modulus
// uint public mod = a % b;
// // Initializing a variable
// // decrement value
// uint public dec = --b;
// // Initializing a variable
// // with increment value
// uint public inc = ++a;
// }

// ////////// III. Decision Making
// // Solidity program to demonstrate the use of 'if statement'

// pragma solidity ^0.8.0;
// // Creating a contract
// contract Types {
// // Declaring state variable
// uint i = 10;
// // Defining function to demonstrate use of 'if statement'
// function decision_making() public view returns(bool){
// if(i<10){
// return true;}}}

// //////////////////// Solidity program to demonstrate the use of 'if...else' statement
// pragma solidity ^0.8.0;
// // Creating a contract
// contract Types {
// // Declaring state variables
// uint i = 10;
// bool even;
// // Defining function to
// // demonstrate the use of
// // 'if...else statement'
// function decision_making() public {
// if(i%2 == 0){
//     even = true;
// }
// else{
// even = false;
// }
// }
// function getresult() public view returns(bool)
// {
// return even;
// }
// }

// /////////////////////////////////////////////////////////////////////////// IV. Strings  -- error
// // Solidity program to demonstrate
// // how to create a contract
// pragma solidity ^0.8.0;
// // Creating a contract
// contract Test {
// // Declaring variable
// string str;
// // Defining a constructor
// constructor(string memory str_in){
// str = str_in;
// }
// // Defining a function to
// // return value of variable 'str'
// function str_out() public view returns(string memory){
// return str;
// }
// }

// //******************************************************************************** Practical No: 5
// // Implement and demonstrate the user of the following in Solidity:
// // i) Arrays
// // ii) Enums
// // iii) Structs
// // iv) Mappings
// // v) Conversations
// // vi) Ether Units
// // vii) Special Variables

// // Arrays
// // Solidity program to demonstrate
// // creating a fixed-size array
// pragma solidity ^0.8.0;
// // Creating a contract
// contract Types {
// // Declaring state variables
// // of type array
// uint[6] data1;
// int[5] data;
// // Defining function to add
// // values to an array
// function array_example() public returns (int[5] memory, uint[6] memory){
// data = [int(50), -63, 77, -28, 90];
// data1 = [uint(10), 20, 30, 40, 50, 60];
// }
// function getresult() public view returns (int[5] memory,uint[6] memory){
// return (data, data1);
// }}

// // Enums
// // Solidity program to demonstrate
// // how to use 'enumerator'
// pragma solidity ^0.8.0;
// // Creating a contract
// contract Types {
// // Creating an enumerator
// enum week_days
// {
// Monday,
// Tuesday,
// Wednesday,
// Thursday,
// Friday,
// Saturday,
// Sunday
// }
// // Declaring variables of
// // type enumerator
// week_days week;
// week_days choice;
// // Setting a default value
// week_days constant default_value
// = week_days.Sunday;
// // Defining a function to
// // set value of choice
// function set_value() public {
// choice = week_days.Thursday;
// }
// // Defining a function to
// // return value of choice
// function get_choice(
// ) public view returns (week_days) {
// return choice;
// }
// // Defining function to
// // return default value
// function getdefaultvalue(
// ) public pure returns(week_days) {
// return default_value;
// }
// }

// // Structs
// // Solidity program to demonstrate
// // how to use 'structures'
// pragma solidity ^0.8.0;
// // Creating a contract
// contract test {
// // Declaring a structure
// struct Book {
// string name;
// string writter;
// uint id;
// bool available;
// }
// // Declaring a structure object
// Book book1;
// // Assigning values to the fields
// // for the structure object book2
// Book book2
// = Book("Building Ethereum DApps",
// "Roberto Infante ",
// 2, false);
// // Defining a function to set values
// // for the fields for structure book1
// function set_book_detail() public {
// book1 = Book("Introducing Ethereum and Solidity",
// "Chris Dannen",
// 1, true);
// }
// // Defining function to print
// // book2 details
// function book_info(
// )public view returns (
// string memory, string memory, uint, bool) {
// return(book2.name, book2.writter,
// book2.id, book2.available);
// }
// // Defining function to print
// // book1 details
// function get_details(
// ) public view returns (string memory, uint) {
// return (book1.name, book1.id);
// }
// }

// // Mapping
// pragma solidity ^0.8.0;
// contract LedgerBalance {
// mapping(address => uint) balance;
// function updateBalance() public returns(uint) {
// balance[msg.sender]=20;
// return balance[msg.sender];
// }
// }

// // ----

// pragma solidity ^0.8.0;
// contract LedgerBalance {
// mapping(address => string) name;
// function updateBalance() public returns(string memory){
// name[msg.sender] = "Dip";
// return name[msg.sender];
// }
// function printsender() public view returns(address) {
// return msg.sender;
// }
// }

//*************************************************************************************** Practical No: 6
// Implement and demonstrate the user of the following in Solidity :
// i. Functions
// ii. View Functions
// iii. Pure Functions
// iv. Fallback Functions
// v. Function Overloading
// vi. Mathematical Functions
// vii. Cryptographic Functions

// Functions
// pragma solidity ^0.8.0;
// contract SolidityTest {
// function testpgmresult() public view returns(uint){
// uint a = 1000; // local variable
// uint b = 2000;
// uint result = a + b;
// return result; //access the state variable
// }
// }

// View Functions
// pragma solidity ^0.8.0;
// contract Test {
// function getResult() public view returns(uint product, uint sum){
// uint a = 1; // local variable
// uint b = 2;
// product = a * b;
// sum = a + b;}}

// Pure Functions

// pragma solidity ^0.8.0;

// contract MyContract {
// uint private result;
// uint private result1;
//     function add(uint256 a, uint256 b) public pure returns (uint256) {  return a + b; }
//     function private_pue(uint c) private pure returns(uint) { return c + 1; }
//     function compute(uint x, uint y) internal pure returns (uint) { return x + y; }

// function getComputedResult() public {
// result1 = compute(3, 5);
// result = private_pue(10);
// }
// function getResult() public view returns(uint) { return result; }
// function getResult1() public view returns(uint) { return result1; }
    
// }


// Functions Overloading
// pragma solidity ^0.8.0;
// contract Test {
// function getSum(uint a, uint b) public pure returns(uint){
// return a + b;}
// function getSum(uint a, uint b, uint c) public pure returns(uint){
// return a + b + c;}
// function callSumWithTwoArguments() public pure returns(uint){
// return getSum(1,2);}
// function callSumWithThreeArguments() public pure returns(uint){
// return getSum(1,2,3);}}

// Mathematical Functions
// pragma solidity ^0.8.0;
// contract Test {function callAddMod() public pure returns(uint){
// return addmod(4, 5, 3);}
// function callMulMod() public pure returns(uint){return mulmod(4, 5, 3);}}

// Cryptographic Functions
// pragma solidity ^0.8.0;
// contract Test {
// function callsha256() public pure returns( bytes32 result){
// return sha256("ronaldo");}
// function callkeccak256() public pure returns( bytes32 result){
// return keccak256("ronaldo");}}

//***************************************************************************************** Practical No: 7

// Implement and demonstrate the user of the following in Solidity :
// I. Contracts
// II. Inheritance
// III. Constructors

// // Contracts
// // Solidity program to demonstrate how to write a smart contract

// pragma solidity ^0.8.0;
// // Defining a contract
// contract Test
// {
// // Declaring state variables
// uint public var1;
// uint public var2;
// uint public sum;
// // Defining public function that sets the value of  the state variable
// function set(uint x, uint y) public
// {
// var1 = x;
// var2=y;
// sum=var1+var2;
// }
// // Defining function to  print the sum of state variables 
// function get(
// ) public view returns (uint) {
// return sum;
// }
// }

// // Inheritance
// // // Solidity program to demonstrate Single Inheritance

// pragma solidity ^0.8.0;
// // Defining contract
// contract parent{
// // Declaring internal state varaiable
// uint internal sum;
// // Defining external function to set value of internal state variable sum
// function setValue() external {
// uint a = 10;
// uint b = 20;
// sum = a + b;
// }
// }
// // Defining child contract
// contract child is parent{
// // Defining external function to return value of internal state variable sum

// function getValue() external view returns(uint) {
// return sum;
// }
// }
// // Defining calling contract
// contract caller {
// // Creating child contract object
// child cc = new child();
// // Defining function to call setValue and getValue functions
// function testInheritance() public {
// cc.setValue();
// }
// function result() public view returns(uint ){
// return cc.getValue();
// }
// }

// // Constructors
// // // Solidity program to demonstrate creating a constructor
// pragma solidity ^0.8.0;
// // Creating a contract
// contract constructorExample {
// // Declaring state variable
// string str;
// // Creating a constructor
// // to set value of 'str'
// constructor() public {str = "student10 Rol No.10";}
// // Defining function to
// // return the value of 'str'
// function getValue() public view returns (string memory) {return str;}}

//****************************************************************************************** Practical No: 8
// Implement and demonstrate the user of the following in Solidity :
// i) Libraries
// ii) Assembly
// iii) Events
// iv) Error Handling

// I    Events 
// // Solidity program to demonstrate 
// // creating an event 

// pragma solidity ^0.8.0;
// // Creating a contract 
// contract eventExample { 
// // Declaring state variables 
// uint256 public value = 0; 
// // Declaring an event 
// event Increment(address owner); 
// // Defining a function for logging event 
// function getValue(uint _a, uint _b) public { 
// emit Increment(msg.sender); 
// value = _a + _b; }}

// // I Error Handling 
// // // Solidity program to demonstrate require statement 
// pragma solidity ^0.8.0;
// // Creating a contract 
// contract requireStatement {
// // Defining function to check input 
// function checkInput( 
// uint _input) public view returns( 
// string memory){ 
// require(_input >= 0, "invalid uint8"); 
// require(_input <= 255, "invalid uint8"); 
// return "Input is Uint8"; 
// } 
// // Defining function to use require statement 
// function Odd(uint _input) public view returns(bool){ 
// require(_input % 2 != 0); 
// return true; 
// } 
// }

// // Solidity program to demonstrate assert statement 
// pragma solidity ^0.8.0;
// // Creating a contract 
// contract assertStatement { 
// // Defining a state variable 
// bool result; 
// // Defining a function to check condition 
// function checkOverflow(uint _num1, uint _num2) public { 
// uint sum = _num1 + _num2; 
// assert(sum<=255); 
// result = true; } 
// // Defining a function to print result of assert statement 
// function getResult() public view returns(string memory){ 
// if(result == true){ 
// return "No Overflow"; } 
// else{ return "Overflow exist"; } }}

// // I Assembly 
// // // Solidity program to demonstrate 
// // // Inline Assembly 
// pragma solidity ^0.8.0;
// // Creating a contract 
// contract InlineAssembly { 
// // Defining function 
// function add(uint a) public view returns (uint b) { 
// // Inline assembly code 
// assembly { 
// let c := add(a, 16) 
// // Use 'mstore' opcode to 
// // store 'c' in memory 
// // at memory address 0x80 
// mstore(0x80, c) 
// {   
// let d := add(sload(c), 12) 
// // assign the value of 'd' to 'b' 
// b := d } 
// // Calculate the sum of 'b+c' with the 'add' opcode 
// // assign the value to 'b' 
// b := add(b, c) 
// // 'c' is deallocated here
//  } }}


// // Solidity program to demonstrate 
// // // Standalone Assembly 
// pragma solidity ^0.8.0;
// // Creating a contract 
// contract StandaloneAssembly { 
// // Defining a function 
// function add(uint a) public view returns (uint b) { 
// // Initializing the variable b 
// b = 10;  
// // Executing for loop till the condition is met 
// for (uint n = 0; n < a; n++) 
// b = b + a; 
// } 
// }

// // I Libraries 
// // // Solidity program to demonstrate how to deploy library without //using for keyword 
// pragma solidity ^0.8.0;
// library libraryExample { 
// // Defining structure 
// struct strings { 
// // Declaring variables 
// string str1 ;
// string str2 ; 
// string str3 ; } 
// function concatenate( 
// string memory _In1, string memory _In2) 
// public view returns( 
// string memory){ 
// return string( 
// abi.encodePacked(_In1, _In2)); } } 
// // Defining calling contract 
// contract libExample{ 
// // Deploying the library without using "for" keyword 
// libraryExample.strings data 
// = libraryExample.strings("Block", "Chain","example"); 
// // Function to calculate and display the result of string concatenation 
// function getResult( 
// ) public view returns(string memory){ 
// string memory result 
// = libraryExample.concatenate(data.str1, data.str2); 
// result = libraryExample.concatenate(result, data.str3); 
// return result; }}



